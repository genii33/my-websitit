from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import random

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import logging
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(name)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ø—á–∏
captcha_storage = {}

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É: –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ—Ä—É–∫—Ç."
    )
    send_captcha(update, context)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–ø—á–∏
def send_captcha(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    fruits = ["üçé –Ø–±–ª–æ–∫–æ", "üçå –ë–∞–Ω–∞–Ω", "üçá –í–∏–Ω–æ–≥—Ä–∞–¥", "üçä –ê–ø–µ–ª—å—Å–∏–Ω", "üçí –í–∏—à–Ω—è", "üçç –ê–Ω–∞–Ω–∞—Å"]
    correct_fruit = random.choice(fruits)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ—Ä—É–∫—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    captcha_storage[user_id] = correct_fruit

    keyboard = [
        [InlineKeyboardButton(fruit, callback_data=fruit) for fruit in fruits[:3]],
        [InlineKeyboardButton(fruit, callback_data=fruit) for fruit in fruits[3:]],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ—Ä—É–∫—Ç:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–ø—á–∏
def handle_captcha(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    selected_fruit = query.data
    correct_fruit = captcha_storage.get(user_id)

    if selected_fruit == correct_fruit:
        query.answer("–í–µ—Ä–Ω–æ!")
        query.edit_message_text("–í—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        send_main_menu(update, context)
    else:
        query.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        send_captcha(update, context)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def send_main_menu(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="menu_search")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile")],
        [InlineKeyboardButton("üíº –°–¥–µ–ª–∫–∏", callback_data="menu_deals")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if update.callback_query:
        query = update.callback_query
        query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    else:
        update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
def handle_menu(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    choice = query.data

    if choice == "menu_search":
        query.answer("–†–∞–∑–¥–µ–ª '–ü–æ–∏—Å–∫'. –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.")
        query.edit_message_text("üîç –†–∞–∑–¥–µ–ª '–ü–æ–∏—Å–∫' (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")
    elif choice == "menu_profile":
        query.answer("–†–∞–∑–¥–µ–ª '–ü—Ä–æ—Ñ–∏–ª—å'. –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.")
        query.edit_message_text("üë§ –†–∞–∑–¥–µ–ª '–ü—Ä–æ—Ñ–∏–ª—å' (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")
    elif choice == "menu_deals":
        query.answer("–†–∞–∑–¥–µ–ª '–°–¥–µ–ª–∫–∏'. –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.")
        query.edit_message_text("üíº –†–∞–∑–¥–µ–ª '–°–¥–µ–ª–∫–∏' (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")
    elif choice == "menu_help":
        query.answer("–†–∞–∑–¥–µ–ª '–ü–æ–º–æ—â—å'.")
        query.edit_message_text("‚ùì –í–æ—Ç –∫–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å:\n- –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    TOKEN = "7840898061:AAH08uegj_mZvmC5hTHBfFZMksSz1AyUeCw"
    updater = Updater(TOKEN)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    updater.dispatcher.add_handler(CommandHandler("start", start))
    updater.dispatcher.add_handler(CallbackQueryHandler(handle_captcha, pattern="^üçé|üçå|üçá|üçä|üçí|üçç$"))
    updater.dispatcher.add_handler(CallbackQueryHandler(handle_menu, pattern="^menu_"))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if name == "main":
    main()
